generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.sqlite"
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src/generated/nestjs-dto"
  outputToNestJsResourceStructure = "false"
  exportRelationModifierClasses   = "true"
  reExport                        = "false"
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = "Entity"
  fileNamingStyle                 = "camel"
}

model User {
  id                     String    @id @default(uuid())
  email                  String    @unique
  name                   String
  password               String
  isEmailConfirmed       Boolean   @default(false)
  emailConfirmationToken String
  projects               Project[]
  parcels                Parcel[]
  owners                 Owner[]
}

model Project {
  id      String   @id @default(uuid())
  title   String
  content String
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  lines   Line[]
  parcels Parcel[]
}

model Line {
  id         String       @id @default(uuid())
  title      String
  lineCoords LineCoords[]
  project    Project      @relation(fields: [projectId], references: [id])
  projectId  String
}

model LineCoords {
  id     String @id @default(uuid())
  x      Float
  y      Float
  line   Line   @relation(fields: [lineId], references: [id])
  lineId String
}

model Parcel {
  id           String         @id @default(uuid())
  parcelNumber String
  voivodeship  String
  county       String
  commune      String
  KW           String?
  class        String?
  parcelBounds ParcelBounds[]
  owners       Owner[]
  project      Project?       @relation(fields: [projectId], references: [id])
  projectId    String?
  user         User?          @relation(fields: [userId], references: [id])
  userId       String?
}

model ParcelBounds {
  id       Int    @id @default(autoincrement())
  x        Float
  y        Float
  parcel   Parcel @relation(fields: [parcelId], references: [id])
  parcelId String
}

model Owner {
  id         String   @id @default(uuid())
  name       String
  surname    String
  streetName String?
  homeNumber String?
  city       String?
  postalCode String?
  parcels    Parcel[]
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?
}
